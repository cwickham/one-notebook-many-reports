---
format: 
  revealjs:
    width: 1920
    height: 1080
    code-line-numbers: false
    code-block-height: 700px
theme: [slides.scss]
filters:
  - highlight-text
---

# From One Notebook to Many Reports: Automating with Quarto

\ 

[Charlotte Wickham]{.big} [{{< iconify fa6-brands:linkedin >}} cvwickham](https://www.linkedin.com/in/cvwickham/)

[{{< iconify simple-icons:posit >}} Posit, PBC]{.big}

::: {.absolute right=0 bottom=0}
{{< qrcode https://cwickham.github.io/one-notebook-many-reports width="400" height="400" >}}
:::

[{{< iconify simple-icons:github >}} cwickham.github.io/one-notebook-many-reports](https://cwickham.github.io/one-notebook-many-reports)


## The Best and Worst Places to Grow Up: How Your Area Compares

![](images/best-worst-places-to-grow-up.png){.nostretch width="1550px" fig-align="center"}

:::aside
<https://www.nytimes.com/interactive/2015/05/03/upshot/the-best-and-worst-places-to-grow-up-how-your-area-compares.html>
:::

## Washington State Soil Health Initiative: State of the Soils Assessment

![](images/wsshi-farm150.png){.nostretch width="1400px" fig-align="center"}

::: {.fragment .border .shadow .absolute top=750 left=1200 style="background-color: #ffffff; padding: 40px;"}
Built with ![Quarto](images/quarto-logo.png){fig-alt="Quarto logo" style="vertical-align: middle;"}  
by [Jadey Ryan](https://jadeyryan.com/)
:::

:::aside
<https://washingtonsoilhealthinitiative.com/state-of-the-soils/>
::: 


## From One Notebook [to Many Reports]{.fragment .quarto-blue fragment-index=3"} [with ![Quarto](images/quarto-logo.png){style="vertical-align: middle;"}]{.fragment .quarto-blue fragment-index=7"}

::: {.columns}

::: {.column}
::: {.border .fragment fragment-index=1 style="height: 800px; width: 750px; margin-top: 50px; overflow: hidden;"}

![](images/corvallis-ipynb.png){.nostretch .tight fig-alt="The `corvallis.ipynb` notebook open in JupyterNotebook. Notebook contains the heading Corvallis, code cells, markdown output and a plot." width="750px"}
::: 
:::

::: {.column}
![](images/arrow.svg){.fragment fragment-index=2 .absolute top=400 left=800 fig-alt="Arrow pointing to the right" width="200px" height="200px"}

![](images/corvallis-pretty-pdf.png){.fragment fragment-index=4 .border .absolute top=150 left=1000 fig-alt="The `corvallis.pdf` document rendered by Quarto. Document contains the heading Corvallis, markdown output and a plot." height="750px" } 

![](images/portland-pretty-pdf.png){.fragment fragment-index=5 .border .absolute top=200 left=1050 fig-alt="The `portland.pdf` document rendered by Quarto. Document contains the heading Portland, markdown output and a plot." height="750px" } 

![](images/eugene-pretty-pdf.png){.fragment fragment-index=6 .border .absolute top=250 left=1100 fig-alt="The `eugene.pdf` document rendered by Quarto. Document contains the heading Eugene, markdown output and a plot." height="750px" } 
:::

::: 

# What is ![Quarto](images/quarto-logo.png){style="vertical-align: middle;"}?

Quarto is an open-source, command line tool, built by Posit, to...

## [Turn notebooks into HTML documents]{.fragment fragment-index=5"}

::: {.terminal .big .center }
`$` [`quarto`]{.fragment fragment-index=1} [`render`]{.fragment fragment-index=2} [`corvallis.ipynb`]{.fragment fragment-index=3} 
:::


[`corvallis.html`]{.big .fragment fragment-index=4}

::: {.fragment fragment-index=4 .scroll-box}
![](images/corvallis-render-html.png){.border .tight fig-alt="The `corvallis.ipynb` notebook rendered by Quarto. Document contains the heading Corvallis, markdown output and a plot."}
:::

## Turn notebooks into [Word]{colour="brand-color.dark-orange"} documents


::: {.terminal .big .center }
`$ quarto render corvallis.ipynb` [\--to docx]{colour="brand-color.orange"}
:::

[`corvallis.docx`]{.big}

::: {.scroll-box}
![](images/corvallis-render-docx.png){.border .tight fig-alt="The `corvallis.ipynb` notebook rendered by Quarto to `docx`.}
:::

## Turn notebooks into [PDF]{colour="brand-color.dark-orange"} documents

::: {.terminal .big .center }
`$ quarto render corvallis.ipynb` [\--to typst]{colour="brand-color.orange"}
:::

[`corvallis.pdf`]{.big}

::: scroll-box
![](images/corvallis-render-pdf.png){.border .tight fig-alt="The `corvallis.ipynb` notebook rendered by Quarto to `docx`. "}
:::

::: aside
[Typst](https://typst.app/docs/) is a modern alternative to LaTeX.  
Get a PDF via LaTeX with `to --pdf`
::: 


## Set document options in a header 

::: {.columns}

::: {.column}
Raw cell at the top of the notebook:

```{.yaml .notebook-cell}
---
# Options for rendering the document
---
```

:::
::: {.column}
:::
::: 

## Set document options in a header 

::: {.columns}

::: {.column}
Raw cell at the top of the notebook:

```{.yaml .notebook-cell}
---
format: typst
---
```

\

:::{.terminal}
quarto render corvallis.ipynb 
:::

:::
::: {.column}
`corvallis.pdf`

![](images/corvallis-render-pdf.png){.border .tight fig-alt="The `corvallis.ipynb` notebook rendered by Quarto to `docx`. " width="750px"}
:::
::: 


## Set document options in a header 

::: {.columns}

::: {.column}
Raw cell at the top of the notebook:

```{.yaml .notebook-cell}
---
format: typst
echo: false # Hide code
---
```
\

:::{.terminal}
quarto render corvallis.ipynb 
:::

:::
::: {.column}
![](images/corvallis-echo-false.png){.border fig-alt="The `corvallis.ipynb` notebook rendered with `echo: false`. There are no code cells shown in the rendered document." width="750px"}
:::
::: 

::: aside
Document options: <https://quarto.org/docs/reference/formats/typst.html>
:::

## Set document options in a header 

::: {.columns}

::: {.column}
Raw cell at the top of the notebook:

```{.yaml .notebook-cell}
---
format: typst
echo: false # Hide code
execute: 
  enabled: true # Run code cells
---
```
\

:::{.terminal}
quarto render corvallis.ipynb 
:::

:::
::: {.column}
![](images/corvallis-echo-false.png){.border fig-alt="The `corvallis.ipynb` notebook rendered with `echo: false`. There are no code cells shown in the rendered document." width="750px"}
:::
::: 

::: aside
Document options: <https://quarto.org/docs/reference/formats/typst.html>
:::

## Set code cell options as `#|` comments

::: {.columns}
::: {.column}
E.g. `#| include: false` to hide the code and output:

```{.python}
#| include: false
tmean.head()
```

![](images/corvallis-ipynb-code-cell.png){.border fig-alt="The `corvallis.ipynb` notebook with a code cell that has `#| include: false` in the first line." width="750px"}

:::
::: {.column}
![](images/corvallis-include-false.png){.border fig-alt="The `corvallis.ipynb` notebook rendered with `#| include: false`. There is no output from the cell that produced the `head` of the data." width="750px"}
:::
::: 

::: aside
Code cell options: <https://quarto.org/docs/reference/cells/cells-jupyter.html>
::: 

## Quarto is ... {.center}

[A way to avoid copy-and-pasting into a Word document]{.r-fit-text}

## And more...websites 

![](images/nbdev-website.png){.border fig-alt="Screenshot of the nbdev website, which is a Quarto website and builds Quarto doc sites."}

## And more...books

![](images/python-for-data-analysis.png){.border fig-alt="Screenshot of the book Python for Data Analysis, which is a Quarto book."}

## And more...presentations

![](images/this-presentation.png){.border fig-alt="Screenshot of this presentation, which is a Quarto presentation."}

## And more...publishing

:::{.terminal .big}
quarto publish slides.qmd github-pages
:::

# Parameterized reports in Quarto

##

:::{.r-fit-text}

Start with a notebook that works for one value:

1. Turn hardcoded value into a variable

2. Make the variable a parameter 

3. Render with a different parameter value

4. Automate rendering for all parameter values

::: 

## 1. Turn hardcoded value into a variable

::: {.columns}
::: {.column}

`corvallis.ipynb`

::: {style="width: 90%;"}

::: {.hide-me}
```{.python  .notebook-cell}
city = "Corvallis"
```
:::

\

```{.markdown  .notebook-cell}
# Corvallis
```

\

```{.python  .notebook-cell}
tmean = tmean_oregon.filter(
    pl.col("city") == "Corvallis",
)
```

\

```{.python .notebook-cell}
...
+ labs(title = "Corvallis, OR", ...)
...
```
:::
:::
::: {.column}
 [`climate.ipynb`]{.fragment}

:::fragment
```{.python  .notebook-cell}
city = "Corvallis"
```
:::

\

:::fragment
```{.python  .notebook-cell}
Markdown(f"# {city}")
```
:::

\

:::fragment
```{.python .notebook-cell}
tmean = tmean_oregon.filter(
    pl.col("city") == city,
)
```
:::

\

:::fragment
```{.python  .notebook-cell }
...
+ labs(title = f"{city}, OR", ...)
...
```
:::

:::
::: 


## 2. Make the variable a parameter 

Add the tag `parameters` to the code cell:

![](images/corvallis-add-tag.png){.border fig-alt="The `corvallis.ipynb` notebook with the code cell that contains the `city` variable highlighted. The tag `parameters` is added to the cell."}

::: aside
Powered by Papermill: <https://papermill.readthedocs.io/en/latest/usage-parameterize.html>
::: 

## 3. Render with a different parameter value 

:::{.terminal}
quarto render climate.ipynb
:::

`climate.pdf`

:::{style="height: 800px; overflow: clip;"}
![](images/corvallis-pdf.png){.border }
:::

## 3. Render with a different parameter value 

:::terminal
quarto render climate.ipynb -P city:Portland 
:::

`climate.pdf`

:::{style="height: 800px; overflow: clip;"}
![](images/portland-render-pdf.png){.border }
:::

## 3. Render with a different parameter value 

:::{.terminal}
quarto render climate.ipynb -P city:Portland \--output-file portland.pdf
:::

`portland.pdf`

:::{style="height: 800px; overflow: clip;"}
![](images/portland-render-pdf.png){.border }
:::

:::{.aside}
::: {style="background-color: #ffffff;"}
For `format: html` move file and supporting folder on your own
:::
:::

## 4. Automate rendering for all cities 

::: {.columns}
::: {.column}
`cities`:

| `city`      | `output_file`   |
|-------------|---------------|
| Portland  | portland.pdf  |
| Cottage Grove   | cottage_grove.pdf    |
| St. Helens     | st_helens.pdf     |
| ...   | ...  |
:::
::: {.column .fragment}
`gen-reports.py`:
```{.python}
from quarto import render

for row in cities.iter_rows(named=True):
    # render() runs `quarto render` 
    # via subprocess.run()
    render(
        "climate.ipynb",
        execute_params={"city": row["city"]},
        output_file=row["output_file"],
    )
```   
:::
::: 

## From One Notebook to Many Reports with Quarto

::: {.columns}

::: {.column}
::: {.border style="height: 800px; width: 750px; margin-top: 50px; overflow: hidden;"}

![](images/corvallis-ipynb.png){.nostretch .tight fig-alt="The `corvallis.ipynb` notebook open in JupyterNotebook. Notebook contains the heading Corvallis, code cells, markdown output and a plot." width="750px"}
::: 
:::

::: {.column}
![](images/arrow.svg){.absolute top=400 left=800 fig-alt="Arrow pointing to the right" width="200px" height="200px"}

![](images/corvallis-pdf.png){.border .absolute top=150 left=1000 fig-alt="The `corvallis.pdf` document rendered by Quarto. Document contains the heading Corvallis, markdown output and a plot." height="750px" } 

![](images/portland-pdf.png){.border .absolute top=200 left=1050 fig-alt="The `portland.pdf` document rendered by Quarto. Document contains the heading Portland, markdown output and a plot." height="750px" } 

![](images/eugene-pdf.png){.border .absolute top=250 left=1100 fig-alt="The `eugene.pdf` document rendered by Quarto. Document contains the heading Eugene, markdown output and a plot." height="750px" } 
:::

::: 

# Making Pretty Reports 

## Add brand with Brand.yml

```{.yaml filename="_brand.yml" code-line-numbers="|1,2,3,5,7,8|11,12,13,14,20-23|24,25"}
{{< include 05-branded-reports/_brand.yml >}}
```

::: aside
Brand.yml: <https://posit-dev.github.io/brand-yml/>
::: 

## Quarto will detect `_brand.yml` 

::: {.columns}
::: {.column}
More control over logo with options:
```{.yaml .notebook-cell}
---
format: 
  typst:
    logo:
      width: 1in
      location: right-top
---
```

:::fragment
Use [`brand-yml` package](https://posit-dev.github.io/brand-yml/pkg/py/) to set brand elements in your code:


```{.python  .notebook-cell}
from brand_yml import Brand
brand = Brand.from_yaml("")
highlight_color = brand.color.secondary
```
:::
:::

::: {.column}
![](images/corvallis-branded.png){}
:::
:::


## Brand + Typst = Pretty PDFs

Typst Docs: <https://typst.app/docs/>

Example: [{{< iconify simple-icons:github >}} cwickham/one-notebook-many-reports/05-pretty-reports](https://github.com/cwickham/scipy-talk/tree/main/05-pretty-reports)

Tips: [Quarto + Typst](#quarto-typst)

::: {.scroll-box style="height: 900px"}
![](images/corvallis-pretty-pdf.png){fig-align="center" fig-alt="The `corvallis.ipynb` notebook rendered by Quarto to `pdf`. The document has dark green header with the city in white text and a map next to it with the location as an orange dot." width="1400px"} 
:::

## PDF Accessibility

:::: {.columns}
::: {.column}
Legislation mandating accessible PDFs:

* [European accessibility act](https://commission.europa.eu/strategy-and-policy/policies/justice-and-fundamental-rights/disability/union-equality-strategy-rights-persons-disabilities-2021-2030/european-accessibility-act_en)

* USA [ADA 2024 web rule](https://www.ada.gov/resources/2024-03-08-web-rule/) for State and Local Governments


Neither `format: typst` nor `format: pdf` currently produce tagged PDFs 😔

:::
::: {.column .fragment}

Possible solutions:

* Use `format: docx` then use Word to export to PDF

* Don't use PDF. Use `format: html`. Quarto ≥v1.8 websites pass `axe-core` checks by default.


:::
::: 


# Quarto for parameterized reports

## 

::: {.r-fit-text}

[**Advantages**]{color="brand-color.quarto-blue"}

* Manage one notebook 

* Render to one or many formats 

* "You do you" automation

:::

## ... so much more

::: {.r-fit-text}

* [Tables](https://quarto.org/docs/authoring/tables.html), e.g. [`great_tables`](https://posit-dev.github.io/great-tables/articles/intro.html), work great too

* Include other `.md` files with the [`{{{< include >}}}` shortcode](https://quarto.org/docs/authoring/includes.html)

* Rearrange content with the [`{{{< contents >}}}` shortcode](https://quarto.org/docs/authoring/contents.html)

* Show [content conditional on `format`](https://quarto.org/docs/authoring/conditional.html), e.g. interactive plot for HTML, static plot for PDF

* Consider [Quarto's plain text format](#qmd) (`*.qmd`)--- 
  easier version control, copy-paste examples

:::

# [Thank you]{.r-fit-text}

* Quarto:  
    - Get Started: <https://quarto.org/docs/get-started/>  
    - Quarto: Parameters <https://quarto.org/docs/computations/parameters.html>

* Source for examples: [{{< iconify simple-icons:github >}} cwickham/one-notebook-many-reports](<https://github.com/cwickham/one-notebook-many-reports>) 

* Quarto Q&A:  [{{< iconify simple-icons:github >}} quarto-dev/quarto-cli Discussions](<https://github.com/quarto-dev/quarto-cli/discussions)

* Ask me at <charlotte.wickham@posit.co>

Big thanks to [Jadey Ryan](https://jadeyryan.com/) for the inspiring example and talk [{{< iconify simple-icons:youtube >}}](<https://youtu.be/lbE5uOqfT70?si=8Qhg_TK8Hc722da8>).

::: {.absolute right=0 bottom=0}
{{< qrcode https://cwickham.github.io/one-notebook-many-reports width="400" height="400" >}}
:::


# `.qmd` {#qmd}

## Consider using the Quarto document format `*.qmd` 

::: {.columns}
::: {.column}
```{.default}
quarto convert corvallis.ipynb 
```

*   Plain text, easier version control, copy-paste examples
*   No output from cells in file, forced reproducibility
*   Header and markdown unadorned
*   Code cells inside `{python}` code blocks:

    ````markdown
    ```{{python}}
    
    ```
    ````

:::
::: {.column}
`corvallis.qmd`
````markdown
---
format: typst
echo: false
title: Corvallis
jupyter: python3
---

```{{python}}
import polars as pl
from plotnine import *
from datetime import date
from calendar import month_name, month_abbr
from IPython.display import Markdown
```

```{{python}}
this_month = date(2025, 5, 1)
highlight_color = "#FF5733" 
```

```{{python}}
tmean_oregon = pl.read_csv("data/tmean-oregon.csv", schema_overrides={"date": pl.Date})
tmean = tmean_oregon.filter(
    pl.col("city") == "Corvallis",
)
```

```{{python}}
#| include: false
tmean.head()
```

```{{python}}
this = tmean.filter(pl.col("date") == this_month).row(0, named=True)
Markdown(f"{month_name[this['month']]} {this['year']} was {abs(this['tmean_diff']):.1f}°C {this['tmean_direction']} than usual.")
```

```{{python}}
(
    ggplot(tmean, aes(x="month", y="tmean"))
    + geom_line(aes(group="year"), alpha=0.2)
    + geom_line(aes(y = "tmean_normal"))
    + geom_line(data=tmean.filter(pl.col("year") == 2025), color=highlight_color)
    + geom_point(
        data=tmean.filter(pl.col("date") == this_month), color=highlight_color
    )
    + scale_x_continuous(breaks=list(range(1, 13)), labels=list(month_abbr[1:]))
    + labs(title = "Corvallis, OR", x="", y="Mean Temperature (°C)")
    + theme_bw() 
    + theme(figure_size = (8, 4))
)
```
````
:::
::: 

# Typst + Quarto {#quarto-typst}

## Typst + Quarto: keep the intermediate `.typ` file 

In document header of `climate.ipynb`:

```yaml
---
format: typst
keep-typ: true
---
```

:::{.terminal}
quarto render climate.ipynb
:::

Output: 

* `climate.pdf`: the final PDF result
* `climate.typ`: the intermediate Typst file. Useful for examining and debugging.


## Typst + Quarto: include raw Typst code

Write Typst code in a raw cell with `` ```{=typst} `` syntax

````{.markdown  .notebook-cell}
```{=typst}
#set figure(numbering: none)
#show figure.caption: set align(left)
```
````

Typst docs: <https://typst.app/docs/>


This [raw syntax](https://quarto.org/docs/authoring/markdown-basics.html#raw-content) works to inject code into other formats too e.g. `=html` and `=latex`.


## Typst + Quarto: wrap elements in Typst functions

Add the [typst-function](https://github.com/christopherkenny/typst-function/tree/main) Quarto extension.

::: {.columns}
::: {.column width="60%"}
`climate.ipynb`:

```yaml
---
filters: [typst-function]
functions: [place]
---
```

\

```{.python .notebook-cell}
#| label: map
oregon_map("Corvallis")
```

\

````{.markdown  .notebook-cell .code-overflow-wrap shortcodes="false"}
::: {.place arguments='bottom + left, dy:-0.25in'}

{{< contents map >}}

:::
````
:::
::: {.column width="40%"}

`climate.typ`:

```{.typst}
#place(bottom + left, dy:-0.25in)[
  // `oregon_map("Corvallis")`
]
```
:::
:::